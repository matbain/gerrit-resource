#!/bin/sh
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

# for jq
PATH=/usr/local/bin:$PATH

payload=$TMPDIR/gerrit-resource-request
cat > $payload <&0

load_pubkey $payload
configure_git_ssl_verification $payload
configure_credentials $payload

# Fetch metadata from JSON
uri=$(jq -r '.source.uri // ""' < $payload)
hostname=$(jq -r '.source.hostname // ""' < $payload)
port=$(jq -r '.source.port // 29418' < $payload)
username=$(jq -r '.source.username // ""' < $payload)
project=$(jq -r '.source.project // ""' < $payload)
query=$(jq -r '.source.query // "status:open"' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
status=$(jq -r '.source.status // "open"' < $payload)
paths="$(jq -r '(.source.paths // ["."])[]' < $payload)" # those "'s are important
ignore_paths="$(jq -r '":!" + (.source.ignore_paths // [])[]' < $payload)" # these ones too
tag_filter=$(jq -r '.source.tag_filter // ""' < $payload)
git_config_payload=$(jq -r '.source.git_config // []' < $payload)
ref=$(jq -r '.version.ref // ""' < $payload)
skip_ci_disabled=$(jq -r '.source.disable_ci_skip // false' < $payload)

# Format URL
if [ -n "$hostname" ]; then
  url="$hostname"
  if [ -n "$username" ]; then
      url="$username@$url"
  fi
  uri="ssh://$url:$port/$project.git"
fi

configure_git_global "${git_config_payload}"

destination=$TMPDIR/gerrit-resource-repo-cache

if [ -d $destination ]; then
  cd $destination
  git fetch
  git reset --hard FETCH_HEAD
else
  branchflag=""
  if [ -n "$branch" ]; then
    branchflag="--branch $branch"
  fi

  git clone --single-branch $uri $branchflag $destination
  cd $destination
fi

if [ -n "$ref" ] && git cat-file -e "$ref"; then
  init_commit=$(git rev-list --max-parents=0 HEAD)
  if [ "${ref}" = "${init_commit}" ]; then
    log_range="--reverse HEAD"
  else
    log_range="--reverse ${ref}~1..HEAD"
  fi
else
  log_range="-1"
fi

if [ $paths = '.' ] && [ -z $ignore_paths ]; then
  paths_search=""
else
  paths_search="-- $paths $ignore_paths"
fi

ci_skip=""
if [ "$skip_ci_disabled" != "true" ]; then
  ci_skip="--grep \\[ci\sskip\\] --invert-grep"
fi

if [ -n "$tag_filter" ]; then
  {
    if [ -n "$ref" ]; then
      result=$(git tag --list '$tag_filter' --sort=creatordate --contains $ref) | jq -R '.' | jq -s "map({ref: .})"
    else
      result=$(git tag --list '$tag_filter' --sort=creatordate | tail -1) | jq -R '.' | jq -s "map({ref: .})"
    fi
  }
else
  {
    result=$(git log $ci_skip --format='%H' $log_range $paths_search) | jq -R '.' | jq -s "map({ref: .})"
  }
fi

if [ -n "$ref" ]; then
    last_time=$(ssh -p $port $url gerrit query $query commit:$ref --format=TEXT --current-patch-set | grep '^    createdOn' | cut -d ':' -f 2-)
    append_to_query 'since' $last_time
fi

result=$(ssh -p $port $url gerrit query $query --format=JSON --current-patch-set | jq -s 'sort_by(.currentPatchSet.createdOn) | .[].currentPatchSet.revision | select(. != null)' | jq -s 'map({ref: .})')
echo "$result" >&3
